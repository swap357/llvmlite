name: llvmlite_linux-64_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/llvmlite_linux-64_wheel_builder.yml
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  LOCAL_LLVMDEV_ARTIFACT_PATH: ${{ github.workspace }}/llvmdev_conda_packages
  FALLBACK_LLVMDEV_VERSION: "15"
  CONDA_CHANNEL_NUMBA: numba/label/manylinux_2_17
  VALIDATION_PYTHON_VERSION: "3.12"
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  linux-64-build:
    name: linux-64-build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' }}
        uses: actions/download-artifact@v4
        with:
          name: llvmdev_for_wheel_linux-64
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install build dependencies
        run: |
          if [ "${{ inputs.llvmdev_run_id }}" != "" ]; then
              CHAN="file:///${{ env.LOCAL_LLVMDEV_ARTIFACT_PATH }}"
          else
              CHAN="${{ env.CONDA_CHANNEL_NUMBA }}"
          fi
          conda install -c "$CHAN" llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }} python-build

      - name: Build wheel
        run: python -m build

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: dist/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

      - name: Show Workflow Run ID
        run: "echo \"Workflow Run ID: ${{ github.run_id }}\""

  linux-64-validate:
    name: linux-64-validate
    needs: linux-64-build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install validation dependencies
        run: conda install -c defaults wheel twine keyring rfc3986

      - name: Download llvmlite wheels
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: dist

      - name: Validate wheels
        run: |
          cd dist

          for WHL_FILE in *.whl; do
            echo "=== Validating $WHL_FILE ==="

            # Check wheel structure
            twine check "$WHL_FILE"

  linux-64-test:
    name: linux-64-test
    needs: linux-64-build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: dist

      - name: Install and test
        run: |
          # Get the Python executable path
          PYTHON_PATH=$(which python${{ matrix.python-version }})

          # Upgrade pip and install wheel
          $PYTHON_PATH -m pip install --upgrade pip wheel

          # Install wheel and run tests
          cd dist
          whl=$(stat -f "%m %N" ./*.whl | sort -n | tail -n 1 | cut -d' ' -f2-)
          echo "Using wheel: $whl"
          $PYTHON_PATH -m pip install -v "$whl"

          # Run tests
          $PYTHON_PATH -m llvmlite.tests

  linux-64-upload:
    name: linux-64-upload
    needs: linux-64-test
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install anaconda-client
        run: conda install -c anaconda anaconda-client

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: dist

      - name: Upload wheel to Anaconda Cloud
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd dist
          whl=$(stat -f "%m %N" ./*.whl | sort -n | tail -n 1 | cut -d' ' -f2-)
          echo "Uploading wheel: $whl"
          anaconda -t $ANACONDA_API_TOKEN upload --force -u numba -l dev "$whl"
