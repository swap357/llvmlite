name: llvmlite_linux-64_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/llvmlite_linux-64_wheel_builder.yml
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  FALLBACK_LLVMDEV_VERSION: "15"
  CONDA_CHANNEL_NUMBA: numba/label/manylinux2014_x86_64
  VALIDATION_PYTHON_VERSION: "3.12"
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  linux-64-build:
    name: linux-64-build-py${{ matrix.python-version }}
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - python-version: "3.10"
            py_path: "cp310-cp310"
          - python-version: "3.11"
            py_path: "cp311-cp311"
          - python-version: "3.12"
            py_path: "cp312-cp312"
          - python-version: "3.13"
            py_path: "cp313-cp313"
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' }}
        uses: actions/download-artifact@v4
        with:
          name: llvmdev_for_wheel_linux-64
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python paths
        run: |
          # Set Python path from manylinux
          PY_VER_MANYLINUX=${{ matrix.py_path }}
          export PATH=/opt/python/$PY_VER_MANYLINUX/bin:$PATH
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "Using python: $(which python)"

      - name: Setup Miniconda
        run: |
          cd /tmp
          curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
          bash miniconda.sh -b -p /opt/conda
          source /opt/conda/etc/profile.d/conda.sh
          echo "CONDA_PREFIX=/opt/conda" >> $GITHUB_ENV
          echo "PATH=/opt/conda/bin:$PATH" >> $GITHUB_ENV
          conda config --set always_yes yes

      - name: Install dependencies
        run: |
          # Create conda environment
          source /opt/conda/etc/profile.d/conda.sh
          conda create -y -n llvmbase
          conda activate llvmbase
          
          # Install llvmdev
          if [ -d "llvmdev_conda_packages" ]; then
              CHAN="file://$(pwd)/llvmdev_conda_packages"
              echo "Using local llvmdev artifact channel: $CHAN"
              conda install -y -c "$CHAN" llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }} --no-deps
          else
              # Install llvmdev from platform-specific channel
              conda install -y -c numba/label/manylinux_2_17 llvmdev --no-deps
          fi
          
          # Install setuptools (needed for Python 3.12+)
          pip install setuptools

      - name: Build wheel
        run: |
          source /opt/conda/etc/profile.d/conda.sh
          conda activate llvmbase
          
          # Clean up
          python setup.py clean
          
          # Build wheel
          python setup.py bdist_wheel

      - name: Repair wheel with auditwheel
        run: |
          # Repair wheel with auditwheel
          cd dist
          mkdir -p wheelhouse
          auditwheel repair *.whl --wheel-dir wheelhouse
          ls -la wheelhouse/
          
          # Move wheels to repo wheelhouse for artifact upload
          mkdir -p ../wheelhouse
          cp wheelhouse/*.whl ../wheelhouse/

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: wheelhouse/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

  linux-64-validate:
    name: linux-64-validate
    needs: linux-64-build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ""

      - name: Install validation dependencies
        run: conda install -c defaults wheel twine keyring rfc3986

      - name: Download llvmlite wheels
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: dist

      - name: Validate wheels
        run: |
          cd dist
          for WHL_FILE in *.whl; do
            echo "=== Validating $WHL_FILE ==="
            # Check wheel structure
            twine check "$WHL_FILE"
          done

  linux-64-test:
    name: linux-64-test
    needs: linux-64-build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: dist

      - name: Install and test
        run: |
          # Get the Python executable path
          PYTHON_PATH=$(which python)
          
          # Upgrade pip and install wheel
          $PYTHON_PATH -m pip install --upgrade pip wheel
          
          # Install wheel
          cd dist
          whl=$(ls -t ./*.whl | head -n 1)
          echo "Using wheel: $whl"
          $PYTHON_PATH -m pip install -v "$whl"
          
          # Run tests
          $PYTHON_PATH -m llvmlite.tests

  linux-64-upload:
    name: linux-64-upload
    needs: [linux-64-test, linux-64-validate]
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ""

      - name: Install anaconda-client
        run: conda install -c anaconda anaconda-client

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: dist

      - name: Upload wheel to Anaconda Cloud
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd dist
          whl=$(ls -t ./*.whl | head -n 1)
          echo "Uploading wheel: $whl"
          anaconda -t $ANACONDA_API_TOKEN upload --force -u numba -l dev "$whl"
