name: llvmlite_linux-64_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/llvmlite_linux-64_wheel_builder.yml
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  FALLBACK_LLVMDEV_VERSION: "15"
  CONDA_CHANNEL_NUMBA: numba/label/manylinux2014_x86_64
  VALIDATION_PYTHON_VERSION: "3.12"
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  linux-64-build:
    name: linux-64-build-py${{ matrix.python-version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' }}
        uses: actions/download-artifact@v4
        with:
          name: llvmdev_for_wheel_linux-64
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ""

      - name: Map Python version
        run: |
          # Map Python version to manylinux path
          case "${{ matrix.python-version }}" in
            "3.10") echo "PYTHON_PATH=cp310-cp310" >> $GITHUB_ENV ;;
            "3.11") echo "PYTHON_PATH=cp311-cp311" >> $GITHUB_ENV ;;
            "3.12") echo "PYTHON_PATH=cp312-cp312" >> $GITHUB_ENV ;;
            "3.13") echo "PYTHON_PATH=cp313-cp313" >> $GITHUB_ENV ;;
            *) echo "Invalid Python version" && exit 1 ;;
          esac

      - name: Create build script
        run: |
          # Create build script to run inside container
          cat > build_wheel.sh << 'EOF'
          #!/bin/bash
          set -ex
          
          # Get arguments
          PY_PATH=$1
          LLVMDEV_VERSION=$2
          
          # Set Python path
          export PATH=/opt/python/${PY_PATH}/bin:$PATH
          echo "Using Python: $(which python)"
          
          # Install Miniconda for llvmdev
          cd /tmp
          curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
          bash miniconda.sh -b -p /opt/conda
          export PATH="/opt/conda/bin:$PATH"
          
          # Setup conda
          source /opt/conda/etc/profile.d/conda.sh
          conda config --set always_yes yes
          
          # Create conda environment
          conda create -y -n llvmbase
          conda activate llvmbase
          
          # Install llvmdev
          cd /io
          if [ -d "llvmdev_conda_packages" ]; then
              CHAN="file:///io/llvmdev_conda_packages"
              echo "Using local llvmdev artifact"
              conda install -y -c "$CHAN" llvmdev=${LLVMDEV_VERSION} --no-deps
          else
              echo "Using remote llvmdev"
              conda install -y -c numba/label/manylinux_2_17 llvmdev --no-deps
          fi
          
          # Install setuptools
          pip install setuptools
          
          # Build wheel
          python setup.py clean
          python setup.py bdist_wheel
          
          # Repair wheel with auditwheel
          cd dist
          mkdir -p wheelhouse
          auditwheel repair *.whl --wheel-dir wheelhouse
          ls -la wheelhouse/
          
          # Done
          echo "Build complete!"
          EOF
          
          chmod +x build_wheel.sh

      - name: Build wheel in manylinux container
        run: |
          # Run the build script in manylinux container
          docker run --rm \
            -v $(pwd):/io \
            quay.io/pypa/manylinux2014_x86_64 \
            /io/build_wheel.sh ${{ env.PYTHON_PATH }} ${{ env.FALLBACK_LLVMDEV_VERSION }}
          
          # Create wheelhouse directory for artifact upload
          mkdir -p wheelhouse
          cp dist/wheelhouse/*.whl wheelhouse/

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: wheelhouse/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

  linux-64-validate:
    name: linux-64-validate
    needs: linux-64-build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ""

      - name: Install validation dependencies
        run: conda install -c defaults wheel twine keyring rfc3986

      - name: Download llvmlite wheels
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: dist

      - name: Validate wheels
        run: |
          cd dist
          for WHL_FILE in *.whl; do
            echo "=== Validating $WHL_FILE ==="
            # Check wheel structure
            twine check "$WHL_FILE"
          done

  linux-64-test:
    name: linux-64-test
    needs: linux-64-build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: dist

      - name: Install and test
        run: |
          # Get the Python executable path
          PYTHON_PATH=$(which python)
          
          # Upgrade pip and install wheel
          $PYTHON_PATH -m pip install --upgrade pip wheel
          
          # Install wheel
          cd dist
          whl=$(ls -t ./*.whl | head -n 1)
          echo "Using wheel: $whl"
          $PYTHON_PATH -m pip install -v "$whl"
          
          # Run tests
          $PYTHON_PATH -m llvmlite.tests

  linux-64-upload:
    name: linux-64-upload
    needs: [linux-64-test, linux-64-validate]
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ""

      - name: Install anaconda-client
        run: conda install -c anaconda anaconda-client

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-linux-64-py${{ matrix.python-version }}
          path: dist

      - name: Upload wheel to Anaconda Cloud
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd dist
          whl=$(ls -t ./*.whl | head -n 1)
          echo "Uploading wheel: $whl"
          anaconda -t $ANACONDA_API_TOKEN upload --force -u numba -l dev "$whl"
