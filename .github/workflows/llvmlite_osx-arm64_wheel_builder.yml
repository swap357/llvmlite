name: llvmlite_osx-arm64_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/llvmlite_osx-arm64_wheel_builder.yml
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  LOCAL_LLVMDEV_ARTIFACT_PATH: ${{ github.workspace }}/llvmdev_conda_packages
  FALLBACK_LLVMDEV_VERSION: "15"
  CONDA_CHANNEL_NUMBA: numba/label/osx_wheel
  VALIDATION_PYTHON_VERSION: "3.12"
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  osx-arm64-build:
    name: osx-arm64-build
    runs-on: macos-14
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Check Initial libunwind State
        run: |
          echo "=== Initial libunwind check ==="
          if [ -f "$CONDA_PREFIX/lib/libunwind.1.0.dylib" ]; then
            echo "Found libunwind.1.0.dylib at: $CONDA_PREFIX/lib/libunwind.1.0.dylib"
            echo "=== Dependencies ==="
            otool -L "$CONDA_PREFIX/lib/libunwind.1.0.dylib"
            echo "=== RPATH entries ==="
            otool -l "$CONDA_PREFIX/lib/libunwind.1.0.dylib" | grep -A2 LC_RPATH || echo "No RPATHs found"
          else
            echo "No libunwind.1.0.dylib found in $CONDA_PREFIX/lib"
          fi
          echo "=== All libunwind files in conda lib ==="
          find "$CONDA_PREFIX/lib" -name "libunwind*" -ls

      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' }}
        uses: actions/download-artifact@v4
        with:
          name: llvmdev_for_wheel_osx-arm64
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install build dependencies
        run: |
          if [ "${{ inputs.llvmdev_run_id }}" != "" ]; then
              CHAN="file:///${{ env.LOCAL_LLVMDEV_ARTIFACT_PATH }}"
          else
              CHAN="${{ env.CONDA_CHANNEL_NUMBA }}"
          fi
          conda install -c "$CHAN" llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }} python-build -y

          echo "=== Post-install libunwind check ==="
          if [ -f "$CONDA_PREFIX/lib/libunwind.1.0.dylib" ]; then
            echo "Found libunwind.1.0.dylib at: $CONDA_PREFIX/lib/libunwind.1.0.dylib"
            echo "=== Dependencies ==="
            otool -L "$CONDA_PREFIX/lib/libunwind.1.0.dylib"
            echo "=== RPATH entries ==="
            otool -l "$CONDA_PREFIX/lib/libunwind.1.0.dylib" | grep -A2 LC_RPATH || echo "No RPATHs found"
          else
            echo "No libunwind.1.0.dylib found in $CONDA_PREFIX/lib"
          fi
          echo "=== All libunwind files in conda lib ==="
          find "$CONDA_PREFIX/lib" -name "libunwind*" -ls

          echo "=== Checking which package provides libunwind ==="
          conda list | grep -i unwind || echo "No package with 'unwind' in name found"
          echo "=== Checking package dependencies ==="
          conda list --show-channel-urls | grep -v "^#" | while read -r line; do
            pkg=$(echo "$line" | awk '{print $1}')
            echo "Checking $pkg..."
            conda search "$pkg" --info | grep -i unwind || true
          done

          if [ -f "$CONDA_PREFIX/lib/libunwind.1.0.dylib" ]; then
            echo "Found libunwind in conda environment, moving it temporarily"
            mkdir -p $CONDA_PREFIX/lib/disabled
            mv $CONDA_PREFIX/lib/libunwind.1.0.dylib $CONDA_PREFIX/lib/disabled/
            # Also move any symbolic links
            find $CONDA_PREFIX/lib -name "libunwind*.dylib" -type l -exec mv {} $CONDA_PREFIX/lib/disabled/ \;
          fi

          # Check LLVM configuration
          echo "LLVM Config info:"
          which llvm-config
          llvm-config --version
          llvm-config --components

      - name: Inspect conda package metadata
        run: |
            # List all installed packages with their versions
            echo "=== All installed packages ==="
            conda list

            # Search the environment's lib directory for libunwind libraries
            echo ""
            echo "=== Searching for libunwind in $CONDA_PREFIX/lib ==="
            find "$CONDA_PREFIX/lib" -maxdepth 1 -name "libunwind*.dylib" -print -exec echo "  Dependencies:" \; -exec otool -L {} \; || echo "No libunwind found in $CONDA_PREFIX/lib"

            # Check dependencies of the main LLVM library from llvmdev
            echo ""
            echo "=== Dependencies of libLLVM from llvmdev ==="
            LLVM_LIB_PATH=$(find "$CONDA_PREFIX/lib" -maxdepth 1 -name "libLLVM.dylib")
            if [ -n "$LLVM_LIB_PATH" ]; then
                echo "Found libLLVM at: $LLVM_LIB_PATH"
                otool -L "$LLVM_LIB_PATH" | grep -i unwind || echo "libLLVM does not link against libunwind"
            else
                echo "libLLVM.dylib not found in $CONDA_PREFIX/lib"
            fi

            # Check dependencies of libc++ from libcxx package
            echo ""
            echo "=== Dependencies of libc++ from libcxx ==="
            LIBCXX_PATH=$(find "$CONDA_PREFIX/lib" -maxdepth 1 -name "libc++.1.dylib")
            if [ -n "$LIBCXX_PATH" ]; then
                echo "Found libc++ at: $LIBCXX_PATH"
                otool -L "$LIBCXX_PATH" | grep -i unwind || echo "libc++ does not link against libunwind"
            else
                echo "libc++.1.dylib not found in $CONDA_PREFIX/lib"
            fi

      - name: Build wheel
        env:
          MACOSX_DEPLOYMENT_TARGET: "11.1"
        run: |
          arch -arm64 python -m build --verbose

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: llvmlite-osx-arm64-py${{ matrix.python-version }}
          path: dist/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

      - name: Show Workflow Run ID
        run: "echo \"Workflow Run ID: ${{ github.run_id }}\""

  osx-arm64-validate:
    name: osx-arm64-validate
    needs: osx-arm64-build
    runs-on: macos-14
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install validation dependencies
        run: conda install -c defaults wheel twine keyring rfc3986

      - name: Download llvmlite wheels
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-arm64-py${{ matrix.python-version }}
          path: dist

      - name: Validate wheels
        run: |
          cd dist
          twine check *.whl

  osx-arm64-test:
    name: osx-arm64-test
    needs: osx-arm64-build
    runs-on: macos-14
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-arm64-py${{ matrix.python-version }}
          path: dist

      - name: Inspect Official PyPI Wheel
        run: |
          # Create and activate virtual environment
          PYTHON_PATH=$(which python${{ matrix.python-version }})
          $PYTHON_PATH -m venv .venv_pypi
          source .venv_pypi/bin/activate

          # Install pip tools
          python -m pip install --upgrade pip wheel

          # Download the latest llvmlite wheel from PyPI without installing it
          mkdir -p pypi_wheel
          cd pypi_wheel

          # Download the wheel - first find latest compatible version
          echo "Finding latest compatible llvmlite version..."
          python -m pip download --no-deps llvmlite

          # Unpack the wheel
          echo "Unpacking PyPI wheel..."
          WHL_FILE=$(ls *.whl)
          echo "Downloaded: $WHL_FILE"
          python -m wheel unpack "$WHL_FILE"

          # Find and examine the dylib
          echo "Examining PyPI wheel dylib..."
          # Get the directory name without using ls -d which can cause issues with newlines
          LLVMLITE_DIR=$(find . -type d -name "llvmlite-*" -not -name "*.whl" | head -1)
          echo "Extracted directory: $LLVMLITE_DIR"

          if [ -d "$LLVMLITE_DIR" ]; then
            DYLIB_PATH=$(find "$LLVMLITE_DIR" -name "libllvmlite.dylib")

            if [ -n "$DYLIB_PATH" ]; then
              echo "Found dylib at: $DYLIB_PATH"
              echo "=== Library dependencies ==="
              otool -L "$DYLIB_PATH"
              echo "=== RPATH entries ==="
              otool -l "$DYLIB_PATH" | grep -A2 LC_RPATH || echo "No RPATHs found"
            else
              echo "No libllvmlite.dylib found in the PyPI wheel"
              echo "Listing all files in the directory:"
              find "$LLVMLITE_DIR" -type f | sort
            fi
          else
            echo "Failed to find the extracted directory"
            echo "Current directory contains:"
            ls -la
          fi

          # Install the downloaded PyPI wheel
          echo ""
          echo "=== Installing PyPI wheel: $WHL_FILE ==="
          python -m pip install "$WHL_FILE"

          # Run tests on the installed PyPI wheel
          echo ""
          echo "=== Running tests on installed PyPI wheel ==="
          # Change directory temporarily if tests assume specific working dir
          # cd .. # Go back to root before running tests if needed
          python -m llvmlite.tests || echo "Tests failed on PyPI wheel (might be expected if version mismatch)"

          # Go back to root directory before finishing step
          cd ..

      - name: Install and test
        run: |          
          # Create virtual environment with system Python
          PYTHON_PATH=$(which python${{ matrix.python-version }})
          $PYTHON_PATH -m venv .venv
          source .venv/bin/activate

          # Upgrade pip and install wheel
          python -m pip install --upgrade pip wheel

          # Install the downloaded wheel
          cd dist
          ls -la
          python -m pip install -v ./*.whl
          echo "=== Installed dylib dependencies ==="
          DYLIB_PATH=$(find $(python -c "import llvmlite; print(llvmlite.__path__[0])") -name "libllvmlite.dylib")
          echo "Found dylib at: $DYLIB_PATH"
          otool -L "$DYLIB_PATH"
          # Run tests
          python -m llvmlite.tests

  osx-arm64-upload:
    name: osx-arm64-upload
    needs: osx-arm64-test
    if: github.event_name == 'workflow_dispatch'
    runs-on: macos-14
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install anaconda-client
        run: conda install -c anaconda anaconda-client

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-arm64-py${{ matrix.python-version }}
          path: dist

      - name: Upload wheel to Anaconda Cloud
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd dist
          whl=$(stat -f "%m %N" ./*.whl | sort -n | tail -n 1 | cut -d' ' -f2-)
          echo "Uploading wheel: $whl"
          anaconda -t $ANACONDA_API_TOKEN upload --force -u numba -l dev "$whl"