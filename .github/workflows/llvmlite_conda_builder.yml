# llvmlite Conda Builder Workflow
# 
# This workflow builds conda packages for llvmlite across multiple platforms.
# 
# Triggers:
# - Push to main branch
# - Pull requests (for path changes)
# - Manual workflow dispatch
# - Comment trigger: "/gha run conda [<llvmdev_run_id>]" (SECURE)
#
# Comment Trigger Security:
# - Only repository collaborators with write/admin access can use comment triggers
# - This prevents untrusted fork contributors from accessing repository secrets
# - Permission denied attempts receive a 😕 reaction and explanation comment
#
# Usage examples:
# - "/gha run conda" - Build all platforms
# - "/gha run conda 1234567890" - Build with specific llvmdev workflow run ID

name: llvmlite_conda_builder

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - .github/workflows/llvmlite_conda_builder.yml
      - buildscripts/github/llvmlite_evaluate.py
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string
      platform:
        description: Conda Platform
        default: linux-64
        required: true
        type: choice
        options:
          - all
          - linux-64
          - linux-aarch64
          - osx-64
          - osx-arm64
          - win-64

# Add concurrency control
concurrency:
  group: >-
    ${{ github.workflow }}-
    ${{ (github.event_name == 'push' && github.ref)
      || github.event.pull_request.number
      || (github.event_name == 'issue_comment' && github.event.issue.number)
      || toJson(github.event.inputs)
      || github.sha }}
  cancel-in-progress: true

env:
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  parse-comment:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && startsWith(github.event.comment.body, '/gha run conda')
    runs-on: ubuntu-24.04
    outputs:
      llvmdev_run_id: ${{ steps.parse.outputs.llvmdev_run_id }}
      platform: ${{ steps.parse.outputs.platform }}
      should_run: ${{ steps.parse.outputs.should_run }}
    steps:
      - name: Check user permissions
        id: check_permission
        run: |
          # Check if the comment author has write access to the repository
          response=$(curl -s -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.event.comment.user.login }}/permission" \
            -o /tmp/permission_response.json)
          
          http_code="${response: -3}"
          echo "HTTP response code: $http_code"
          
          if [ "$http_code" = "200" ]; then
            permission=$(jq -r '.permission' /tmp/permission_response.json)
            echo "User permission: $permission"
            
            if [[ "$permission" =~ ^(admin|write)$ ]]; then
              echo "has_permission=true" >> $GITHUB_OUTPUT
              echo "✅ User ${{ github.event.comment.user.login }} has $permission permission"
            else
              echo "has_permission=false" >> $GITHUB_OUTPUT
              echo "❌ User ${{ github.event.comment.user.login }} has $permission permission (need admin/write)"
            fi
          else
            echo "has_permission=false" >> $GITHUB_OUTPUT
            echo "❌ Failed to check permissions for ${{ github.event.comment.user.login }} (HTTP $http_code)"
          fi

      - name: Parse comment
        id: parse
        if: steps.check_permission.outputs.has_permission == 'true'
        run: |
          comment="${{ github.event.comment.body }}"
          echo "Parsing comment: $comment"
          
          # Check if comment starts with the trigger
          if [[ "$comment" =~ ^/gha\ run\ conda ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            
            # Extract llvmdev_run_id if provided (pattern: /gha run conda <run_id>)
            if [[ "$comment" =~ ^/gha\ run\ conda\ ([0-9]+) ]]; then
              llvmdev_run_id="${BASH_REMATCH[1]}"
              echo "llvmdev_run_id=$llvmdev_run_id" >> $GITHUB_OUTPUT
              echo "Found llvmdev_run_id: $llvmdev_run_id"
            else
              echo "llvmdev_run_id=" >> $GITHUB_OUTPUT
              echo "No llvmdev_run_id provided"
            fi
            
            # Default platform to 'all' for comment triggers
            echo "platform=all" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Add permission denied reaction
        if: steps.check_permission.outputs.has_permission == 'false'
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions \
            -d '{"content":"confused"}'
          
          # Add a reply comment explaining the permission requirement
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            -d "{\"body\":\"❌ @${{ github.event.comment.user.login }} Sorry, only repository collaborators with write access can trigger conda builds via comments for security reasons.\"}"

      - name: Add reaction to comment
        if: steps.parse.outputs.should_run == 'true'
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions \
            -d '{"content":"rocket"}'

  check:
    runs-on: ubuntu-24.04
    if: >-
      always() && (
        github.event_name != 'issue_comment' || 
        (needs.parse-comment.result == 'success' && needs.parse-comment.outputs.should_run == 'true')
      )
    needs: [parse-comment]
    outputs:
      matrix: ${{ steps.evaluate.outputs.matrix }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # For comment triggers, checkout the PR branch
          ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}
          
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'
      - name: Evaluate
        id: evaluate
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_WORKFLOW_INPUT: >-
            ${{ github.event_name == 'issue_comment' && 
                format('{{"llvmdev_run_id":"{0}","platform":"{1}"}}', 
                       needs.parse-comment.outputs.llvmdev_run_id, 
                       needs.parse-comment.outputs.platform) ||
                toJson(github.event.inputs) }}
        run: |
          set -ex
          echo "=== Environment ==="
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Inputs: $GITHUB_WORKFLOW_INPUT"
          echo "=== Running evaluation script ==="
          ./buildscripts/github/llvmlite_evaluate.py
          echo "=== Evaluation completed ==="

  build:
    needs: [parse-comment, check]
    name: ${{ matrix.platform }}-py${{ matrix.python-version }}-build
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix: ${{fromJson(needs.check.outputs.matrix)}}
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          # For comment triggers, checkout the PR branch
          ref: ${{ github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}

      - name: Setup platform-specific requirements
        if: matrix.platform == 'osx-64'
        run: |
          source ./buildscripts/github/setup_platform.sh "osx-64"

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1
        with:
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ""

      - name: Install conda-build
        run: conda install conda-build

      - name: Download llvmdev Artifact
        if: >-
          (github.event_name == 'workflow_dispatch' && inputs.llvmdev_run_id != '') ||
          (github.event_name == 'issue_comment' && needs.parse-comment.outputs.llvmdev_run_id != '')
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmdev_${{ matrix.platform }}
          path: llvmdev_conda_packages
          run-id: >-
            ${{ github.event_name == 'workflow_dispatch' && inputs.llvmdev_run_id ||
                needs.parse-comment.outputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build llvmlite conda package
        run: |
          if [ "${{ github.event_name == 'workflow_dispatch' && inputs.llvmdev_run_id || needs.parse-comment.outputs.llvmdev_run_id }}" != "" ]; then
              LLVMDEV_CHANNEL="file:///${{ github.workspace }}/llvmdev_conda_packages"
          else
              LLVMDEV_CHANNEL="numba"
          fi
          CONDA_CHANNEL_DIR="conda_channel_dir"
          mkdir $CONDA_CHANNEL_DIR
          conda build --debug -c "$LLVMDEV_CHANNEL" -c defaults --python=${{ matrix.python-version }} conda-recipes/llvmlite --output-folder=$CONDA_CHANNEL_DIR --no-test

      - name: Upload llvmlite conda package
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: conda_channel_dir
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

      - name: Show Workflow Run ID
        run: "echo \"Workflow Run ID: ${{ github.run_id }}\""

  test:
    name: ${{ matrix.platform }}-py${{ matrix.python-version }}-test
    needs: [parse-comment, check, build]
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix: ${{fromJson(needs.check.outputs.matrix)}}
      fail-fast: false

    steps:
      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1

      - name: Download llvmlite artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}

      - name: Install conda-build
        run: conda install conda-build

      - name: Run tests
        run: conda build --test ${{ matrix.platform }}/llvmlite*.conda
