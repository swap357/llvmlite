name: llvmlite_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/llvmlite_wheel_builder.yml
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string
      upload_wheels:
        description: 'Upload wheels to Anaconda Cloud'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  FALLBACK_LLVMDEV_VERSION: "15"
  ARTIFACT_RETENTION_DAYS: 7
  VALIDATION_PYTHON_VERSION: "3.12"

jobs:
  build:
    name: ${{ matrix.platform }}-build-py${{ matrix.python-version }}
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        platform: [linux-64, linux-arm64, osx-64, osx-arm64, win-64]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - platform: linux-64
            runner: ubuntu-latest
            manylinux_image: manylinux2014_x86_64
            conda_channel: numba/label/manylinux2014_x86_64
            miniconda_file: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
          - platform: linux-arm64
            runner: ubuntu-24.04-arm
            manylinux_image: manylinux_2_28_aarch64
            conda_channel: numba/label/manylinux2014_aarch64
            miniconda_file: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh
          - platform: osx-64
            runner: macos-13
            conda_channel: numba/label/osx_wheel
            macosx_deployment_target: "10.15"
          - platform: osx-arm64
            runner: macos-14
            conda_channel: numba/label/osx_wheel
            macosx_deployment_target: "11.1"
          - platform: win-64
            runner: windows-2019
            conda_channel: numba/label/win64_wheel
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      # Download artifacts
      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' }}
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmdev_for_wheel_${{ matrix.platform }}
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Setup for Linux platforms
      - name: Map Python version (Linux)
        if: startsWith(matrix.platform, 'linux-')
        run: |
          # Map Python version to manylinux path
          case "${{ matrix.python-version }}" in
            "3.10") echo "PYTHON_PATH=cp310-cp310" >> "$GITHUB_ENV" ;;
            "3.11") echo "PYTHON_PATH=cp311-cp311" >> "$GITHUB_ENV" ;;
            "3.12") echo "PYTHON_PATH=cp312-cp312" >> "$GITHUB_ENV" ;;
            "3.13") echo "PYTHON_PATH=cp313-cp313" >> "$GITHUB_ENV" ;;
            *) echo "Invalid Python version" && exit 1 ;;
          esac

      # Setup for Linux builds using manylinux containers
      - name: Build wheel in manylinux container (Linux)
        if: startsWith(matrix.platform, 'linux-')
        run: |
          # Run the build script in manylinux container
          docker run --rm \
            -v "$(pwd):/root/llvmlite" \
            quay.io/pypa/${{ matrix.manylinux_image }} \
            bash -c "git config --global --add safe.directory /root/llvmlite && /root/llvmlite/buildscripts/manylinux/build_llvmlite.sh ${{ matrix.miniconda_file }} ${{ env.PYTHON_PATH }}"

          # Create wheelhouse directory for artifact upload
          mkdir -p wheelhouse

          # The script creates output in a specific location based on architecture and Python version
          if [[ "${{ matrix.platform }}" == "linux-64" ]]; then
            ARCH="x86_64"
          else
            ARCH="aarch64"
          fi

          WHEEL_DIR="docker_output/dist_${ARCH}_${{ env.PYTHON_PATH }}/wheelhouse"

          echo "Available wheels in $WHEEL_DIR:"
          find "$WHEEL_DIR" -type f -name "*.whl" -print

          cp "$WHEEL_DIR"/*.whl wheelhouse/ || echo "Warning: No matching wheel found!"

          echo "--- Final wheel for upload: ---"
          find wheelhouse -type f -name "*.whl" -print

      # Setup for macOS and Windows builds
      - name: Setup Miniconda (non-Linux)
        if: ${{ !startsWith(matrix.platform, 'linux-') }}
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1
        with:
          python-version: ${{ matrix.python-version }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      # macOS and Windows dependencies
      - name: Install build dependencies (non-Linux)
        if: ${{ !startsWith(matrix.platform, 'linux-') }}
        run: |
          if [ "${{ inputs.llvmdev_run_id }}" != "" ]; then
              CHAN="file://${{ github.workspace }}/llvmdev_conda_packages"
          else
              CHAN="${{ matrix.conda_channel }}"
          fi
          conda install -c "$CHAN" llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }} python-build

          # Additional packages for Windows
          if [[ "${{ matrix.platform }}" == "win-64" ]]; then
            conda install -c "$CHAN" cmake libxml2
          fi

          # Hide libunwind to prevent it from being linked against during macOS build
          if [[ "${{ matrix.platform }}" == "osx-"* ]]; then
            mkdir -p "$CONDA_PREFIX/lib/hide_unwind"
            mv "$CONDA_PREFIX/lib/libunwind"*.dylib "$CONDA_PREFIX/lib/hide_unwind/" 2>/dev/null || true
          fi

      # Fix for macOS x86_64 - select xcode
      - name: Select Xcode 14.1 (macOS x86_64)
        if: matrix.platform == 'osx-64'
        run: sudo xcode-select -s /Applications/Xcode_14.1.0.app

      # Build for macOS
      - name: Build wheel (macOS)
        if: startsWith(matrix.platform, 'osx-')
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macosx_deployment_target }}
        run: |
          if [[ "${{ matrix.platform }}" == "osx-arm64" ]]; then
            # Use arch command for arm64
            arch -arm64 python -m build --verbose --config-setting="--global-option=build_ext" --config-setting="--global-option=-v"
          else
            # Regular build for x86_64
            python -m build
          fi

      # macOS x86_64 special handling for library paths
      - name: Fix macOS wheel library paths (macOS x86_64)
        if: matrix.platform == 'osx-64'
        run: |
          python -m pip install wheel
          cd dist
          whl=$(stat -f "%m %N" ./*.whl | sort -n | tail -n 1 | cut -d' ' -f2-)
          bash "$GITHUB_WORKSPACE/buildscripts/github/patch_osx-64_wheel.sh" "$whl"

      # Build for Windows
      - name: Build wheel (Windows)
        if: matrix.platform == 'win-64'
        run: python -m build

      # Upload artifacts - Linux uses wheelhouse, others use dist
      - name: Upload wheel (Linux)
        if: startsWith(matrix.platform, 'linux-')
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: wheelhouse/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

      - name: Upload wheel (non-Linux)
        if: ${{ !startsWith(matrix.platform, 'linux-') }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: dist/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

      - name: Show Workflow Run ID
        run: "echo \"Workflow Run ID: ${{ github.run_id }}\""

  validate:
    name: validate-${{ matrix.platform }}-py${{ matrix.python-version }}
    needs: build
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        platform: [linux-64, linux-arm64, osx-64, osx-arm64, win-64]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - platform: linux-64
            runner: ubuntu-latest
          - platform: linux-arm64
            runner: ubuntu-24.04-arm
          - platform: osx-64
            runner: macos-13
          - platform: osx-arm64
            runner: macos-14
          - platform: win-64
            runner: windows-2019
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install validation dependencies
        run: |
          conda install -c defaults wheel twine keyring rfc3986

          # Windows needs py-lief
          if [[ "${{ matrix.platform }}" == "win-64" ]]; then
            conda install -c defaults py-lief
          fi

      - name: Download llvmlite wheels
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: dist

      - name: Validate wheels (standard)
        if: matrix.platform != 'win-64'
        run: |
          cd dist
          for WHL_FILE in *.whl; do
            echo "=== Validating $WHL_FILE ==="
            twine check "$WHL_FILE"
          done

      - name: Validate wheels (Windows)
        if: matrix.platform == 'win-64'
        run: |
          cd dist
          for WHL_FILE in *.whl; do
            wheel unpack "$WHL_FILE"
            python "$GITHUB_WORKSPACE"/buildscripts/github/validate_win-64_wheel.py llvmlite/binding/llvmlite.dll
            twine check "$WHL_FILE"
          done

  test:
    name: test-${{ matrix.platform }}-py${{ matrix.python-version }}
    needs: build
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        platform: [linux-64, linux-arm64, osx-64, osx-arm64, win-64]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - platform: linux-64
            runner: ubuntu-latest
          - platform: linux-arm64
            runner: ubuntu-24.04-arm
          - platform: osx-64
            runner: macos-13
          - platform: osx-arm64
            runner: macos-14
          - platform: win-64
            runner: windows-2019
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download llvmlite wheel
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: dist

      # Linux and Windows installation and testing
      - name: Install and test (Linux/Windows)
        if: matrix.platform != 'osx-arm64' && matrix.platform != 'osx-64'
        run: |
          # Upgrade pip and install wheel
          python -m pip install --upgrade pip wheel

          # Find appropriate wheel for Python version
          cd dist
          PY_TAG=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")

          if [[ "${{ matrix.platform }}" == "win-64" ]]; then
            # Windows compatible way using bash
            whl=$(ls -1 ./*.whl)
          else
            # Linux: find wheel matching Python version
            whl=$(find . -type f -name "*${PY_TAG}*.whl" | sort | head -n 1)
          fi

          if [ -z "$whl" ]; then
            echo "ERROR: No matching wheel found for Python ${{ matrix.python-version }} (tag: $PY_TAG)"
            find . -type f -name "*.whl" -print
            exit 1
          fi

          echo "Using wheel: $whl"
          python -m pip install -v "$whl"

          # Run tests
          python -m llvmlite.tests

      # macOS installation and testing requires special handling
      - name: Install and test (macOS)
        if: startsWith(matrix.platform, 'osx-')
        run: |
          # Get the Python executable path for macOS
          PYTHON_PATH=$(which "python${{ matrix.python-version }}")

          # Create and use a virtual environment for macOS
          "$PYTHON_PATH" -m venv .venv && source .venv/bin/activate
          python -m pip install --upgrade pip wheel

          cd dist
          if [[ "${{ matrix.platform }}" == "osx-arm64" ]]; then
            # For arm64, just install all wheels
            python -m pip install -v ./*.whl
          else
            # For x86_64, need to find the wheel
            whl=$(stat -f "%m %N" ./*.whl | sort -n | tail -n 1 | cut -d' ' -f2-)
            python -m pip install -v "$whl"
          fi

          # On macOS ARM64, check the dylib
          if [[ "${{ matrix.platform }}" == "osx-arm64" ]]; then
            DYLIB_PATH=$(find "$(python -c "import llvmlite; print(llvmlite.__path__[0])")" -name "libllvmlite.dylib")
            echo "Found dylib at: $DYLIB_PATH" && otool -L "$DYLIB_PATH"
          fi

          python -m llvmlite.tests

  upload:
    name: upload-${{ matrix.platform }}-py${{ matrix.python-version }}
    needs: [test, validate]
    if: github.event_name == 'workflow_dispatch' && inputs.upload_wheels == true
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        platform: [linux-64, linux-arm64, osx-64, osx-arm64, win-64]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - platform: linux-64
            runner: ubuntu-latest
          - platform: linux-arm64
            runner: ubuntu-24.04-arm
          - platform: osx-64
            runner: macos-13
          - platform: osx-arm64
            runner: macos-14
          - platform: win-64
            runner: windows-2019
      fail-fast: false
    steps:
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install anaconda-client
        run: conda install -c anaconda anaconda-client

      - name: Download llvmlite wheel
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: dist

      - name: Upload wheel to Anaconda Cloud (Linux)
        if: startsWith(matrix.platform, 'linux-')
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd dist
          # Find appropriate wheel for Python version
          PY_TAG="cp$(echo "${{ matrix.python-version }}" | tr -d '.')"
          whl=$(find . -type f -name "*${PY_TAG}*.whl" | sort | head -n 1)

          if [ -z "$whl" ]; then
            echo "ERROR: No matching wheel found for Python ${{ matrix.python-version }}"
            find . -type f -name "*.whl" -print
            exit 1
          fi

          echo "Uploading wheel: $whl"
          anaconda -t "$ANACONDA_API_TOKEN" upload --force -u numba -l dev "$whl"

      - name: Upload wheel to Anaconda Cloud (macOS/Windows)
        if: ${{ !startsWith(matrix.platform, 'linux-') }}
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd dist
          if [[ "${{ matrix.platform }}" == "win-64" ]]; then
            # Windows compatible way using bash
            whl=$(ls -1 ./*.whl)
          else
            # macOS method using stat
            whl=$(stat -f "%m %N" ./*.whl | sort -n | tail -n 1 | cut -d' ' -f2-)
          fi

          echo "Uploading wheel: $whl"
          anaconda -t "$ANACONDA_API_TOKEN" upload --force -u numba -l dev "$whl"