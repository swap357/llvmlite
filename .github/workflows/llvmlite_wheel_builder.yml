name: llvmlite_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/llvmlite_wheel_builder.yml
      - buildscripts/github/llvmlite_wheel_evaluate.py
  label:
    types: [created]
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string
      upload_wheels:
        description: 'Upload wheels to Anaconda Cloud'
        required: false
        type: boolean
        default: false
      platform:
        description: Conda Platform
        default: linux-64
        required: true
        type: choice
        options:
          - linux-64
          - linux-arm64
          - osx-64
          - osx-arm64
          - win-64
      python-version:
        description: Python version
        default: "3.12"
        required: true
        type: choice
        options:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"

concurrency:
  group: >-
    ${{ github.workflow }}-
    ${{ github.event.pull_request.number
      || toJson(github.event.inputs)
      || github.event.label.name
      || github.sha }}
  cancel-in-progress: true

env:
  FALLBACK_LLVMDEV_VERSION: "15"
  ARTIFACT_RETENTION_DAYS: 7
  VALIDATION_PYTHON_VERSION: "3.12"

jobs:
  check:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.evaluate.outputs.matrix }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'
      - name: Evaluate
        id: evaluate
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_LABEL_NAME: ${{ github.event.label.name }}
          GITHUB_WORKFLOW_INPUT: ${{ toJson(github.event.inputs) }}
        run: |
          set -ex
          echo "=== Environment ==="
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Label: $GITHUB_LABEL_NAME"
          echo "Inputs: $GITHUB_WORKFLOW_INPUT"
          echo "=== Running evaluation script ==="
          ./buildscripts/github/llvmlite_wheel_evaluate.py
          echo "=== Evaluation completed ==="

  build:
    needs: check
    name: ${{ matrix.platform }}-build-py${{ matrix.python-version }}
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix: ${{fromJson(needs.check.outputs.matrix)}}
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Download llvmdev Artifact
        if: inputs.llvmdev_run_id != ''
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmdev_for_wheel_${{ matrix.platform }}
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup conda environment (non-Linux)
        if: ${{ !startsWith(matrix.platform, 'linux-') }}
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1
        with:
          python-version: ${{ matrix.python-version }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Setup wheel build dependencies (macOS x86_64)
        if: matrix.platform == 'osx-64'
        run: |
          # Setup conda channel
          if [ -n "${{ inputs.llvmdev_run_id }}" ]; then
            echo "CONDA_CHANNEL=file:///${{ github.workspace }}/llvmdev_conda_packages" >> "$GITHUB_ENV"
          else
            echo "CONDA_CHANNEL=numba/label/osx_wheel" >> "$GITHUB_ENV"
          fi

          # Install dependencies
          conda install -c "$CONDA_CHANNEL" llvmdev="${{ env.FALLBACK_LLVMDEV_VERSION }}" python-build

          # Hide libunwind to prevent linking issues
          mkdir -p "$CONDA_PREFIX/lib/hide_unwind"
          mv "$CONDA_PREFIX/lib/libunwind"*.dylib "$CONDA_PREFIX/lib/hide_unwind/" 2>/dev/null || true

          # Setup Xcode
          sudo xcode-select -s /Applications/Xcode_14.1.0.app

      - name: Setup wheel build dependencies (macOS ARM64)
        if: matrix.platform == 'osx-arm64'
        run: |
          # Setup conda channel
          if [ -n "${{ inputs.llvmdev_run_id }}" ]; then
            echo "CONDA_CHANNEL=file:///${{ github.workspace }}/llvmdev_conda_packages" >> "$GITHUB_ENV"
          else
            echo "CONDA_CHANNEL=numba/label/osx_wheel" >> "$GITHUB_ENV"
          fi

          # Install dependencies
          conda install -c "$CONDA_CHANNEL" llvmdev="${{ env.FALLBACK_LLVMDEV_VERSION }}" python-build

          # Hide libunwind to prevent linking issues
          mkdir -p "$CONDA_PREFIX/lib/hide_unwind"
          mv "$CONDA_PREFIX/lib/libunwind"*.dylib "$CONDA_PREFIX/lib/hide_unwind/" 2>/dev/null || true

      - name: Setup wheel build dependencies (Windows)
        if: matrix.platform == 'win-64'
        run: |
          # Setup conda channel
          if [ -n "${{ inputs.llvmdev_run_id }}" ]; then
            echo "CONDA_CHANNEL=file:///${{ github.workspace }}/llvmdev_conda_packages" >> "$GITHUB_ENV"
          else
            echo "CONDA_CHANNEL=numba/label/win64_wheel" >> "$GITHUB_ENV"
          fi

          # Install base dependencies
          conda install -c "$CONDA_CHANNEL" llvmdev="${{ env.FALLBACK_LLVMDEV_VERSION }}" python-build

          # Install Windows-specific dependencies
          conda install -c "$CONDA_CHANNEL" cmake libxml2

      - name: Build wheel (Windows)
        if: matrix.platform == 'win-64'
        run: python -m build

      - name: Build wheel (macOS x86_64)
        if: matrix.platform == 'osx-64'
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.15"
        run: python -m build

      - name: Build wheel (macOS ARM64)
        if: matrix.platform == 'osx-arm64'
        env:
          MACOSX_DEPLOYMENT_TARGET: "11.1"
          LDFLAGS: "-v -Wl,-rpath,/usr/lib"
        run: arch -arm64 python -m build --verbose --config-setting="--global-option=build_ext" --config-setting="--global-option=-v"

      - name: Fix macOS x86_64 wheel library paths
        if: matrix.platform == 'osx-64'
        run: |
          python -m pip install wheel
          cd dist
          whl=$(stat -f "%m %N" ./*.whl | sort -n | tail -n 1 | cut -d' ' -f2-)
          bash "$GITHUB_WORKSPACE/buildscripts/github/patch_osx-64_wheel.sh" "$whl"

      # Linux builds
      - name: Map Python version for manylinux (Linux)
        if: startsWith(matrix.platform, 'linux-')
        run: |
          case "${{ matrix.python-version }}" in
            "3.10") echo "PYTHON_PATH=cp310-cp310" >> "$GITHUB_ENV" ;;
            "3.11") echo "PYTHON_PATH=cp311-cp311" >> "$GITHUB_ENV" ;;
            "3.12") echo "PYTHON_PATH=cp312-cp312" >> "$GITHUB_ENV" ;;
            "3.13") echo "PYTHON_PATH=cp313-cp313" >> "$GITHUB_ENV" ;;
            *) echo "Invalid Python version: ${{ matrix.python-version }}" && exit 1 ;;
          esac

      - name: Build wheel in manylinux container (Linux)
        if: startsWith(matrix.platform, 'linux-')
        run: |
          docker run --rm -v "$(pwd):/root/llvmlite" quay.io/pypa/${{ matrix.manylinux_image }} \
            bash -c "git config --global --add safe.directory /root/llvmlite && \
                     /root/llvmlite/buildscripts/manylinux/build_llvmlite.sh ${{ matrix.miniconda_file }} $PYTHON_PATH"

          mkdir -p wheelhouse
          ARCH=$([[ "${{ matrix.platform }}" == "linux-64" ]] && echo "x86_64" || echo "aarch64")
          cp "docker_output/dist_${ARCH}_${PYTHON_PATH}/wheelhouse"/*.whl wheelhouse/

      - name: Upload wheel
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: ${{ startsWith(matrix.platform, 'linux-') && 'wheelhouse/*.whl' || 'dist/*.whl' }}
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

  validate:
    name: validate-${{ matrix.platform }}-py${{ matrix.python-version }}
    needs: [check, build]
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix: ${{fromJson(needs.check.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install validation dependencies
        run: conda install -c defaults wheel twine keyring rfc3986

      - name: Install Windows validation dependencies
        if: matrix.platform == 'win-64'
        run: conda install -c defaults py-lief

      - name: Download llvmlite wheels
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: dist

      - name: Validate wheels (standard)
        if: matrix.platform != 'win-64'
        run: |
          cd dist
          for WHL_FILE in *.whl; do
            echo "=== Validating $WHL_FILE ==="
            twine check "$WHL_FILE"
          done

      - name: Validate wheels (Windows)
        if: matrix.platform == 'win-64'
        run: |
          cd dist
          for WHL_FILE in *.whl; do
            wheel unpack "$WHL_FILE"
            python "$GITHUB_WORKSPACE"/buildscripts/github/validate_win-64_wheel.py llvmlite/binding/llvmlite.dll
            twine check "$WHL_FILE"
          done

  test:
    name: test-${{ matrix.platform }}-py${{ matrix.python-version }}
    needs: [check, build]
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix: ${{fromJson(needs.check.outputs.matrix)}}
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download llvmlite wheel
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: dist

      - name: Install and test wheel (Linux/Windows)
        if: startsWith(matrix.platform, 'linux-') || matrix.platform == 'win-64'
        run: |
          python -m pip install --upgrade pip wheel
          cd dist
          if [[ "${{ matrix.platform }}" == "win-64" ]]; then
            whl=$(ls -1 ./*.whl)
          else
            PY_TAG=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
            whl=$(find . -type f -name "*${PY_TAG}*.whl" | sort | head -n 1)
          fi
          [ -z "$whl" ] && echo "ERROR: No wheel found" && exit 1
          python -m pip install -v "$whl"
          python -m llvmlite.tests

      - name: Install and test wheel (macOS)
        if: startsWith(matrix.platform, 'osx-')
        run: |
          PYTHON_PATH=$(which "python${{ matrix.python-version }}")
          "$PYTHON_PATH" -m venv .venv && source .venv/bin/activate
          python -m pip install --upgrade pip wheel
          cd dist
          if [[ "${{ matrix.platform }}" == "osx-arm64" ]]; then
            python -m pip install -v ./*.whl
            DYLIB_PATH=$(find "$(python -c "import llvmlite; print(llvmlite.__path__[0])")" -name "libllvmlite.dylib")
            echo "Found dylib at: $DYLIB_PATH" && otool -L "$DYLIB_PATH"
          else
            whl=$(stat -f "%m %N" ./*.whl | sort -n | tail -n 1 | cut -d' ' -f2-)
            python -m pip install -v "$whl"
          fi
          python -m llvmlite.tests

  upload:
    name: upload-${{ matrix.platform }}-py${{ matrix.python-version }}
    needs: [check, test, validate]
    if: github.event_name == 'workflow_dispatch' && inputs.upload_wheels == true
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix: ${{fromJson(needs.check.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3.1.1
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install anaconda-client
        run: conda install -c anaconda anaconda-client

      - name: Download llvmlite wheel
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: llvmlite-${{ matrix.platform }}-py${{ matrix.python-version }}
          path: dist

      - name: Upload wheel to Anaconda Cloud (Linux)
        if: startsWith(matrix.platform, 'linux-')
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd dist
          PY_TAG="cp$(echo "${{ matrix.python-version }}" | tr -d '.')"
          whl=$(find . -type f -name "*${PY_TAG}*.whl" | sort | head -n 1)
          [ -z "$whl" ] && echo "ERROR: No wheel found" && exit 1
          anaconda -t "$ANACONDA_API_TOKEN" upload --force -u numba -l dev "$whl"

      - name: Upload wheel (Windows)
        if: matrix.platform == 'win-64'
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd dist
          whl=$(ls -1 ./*.whl)
          anaconda -t "$ANACONDA_API_TOKEN" upload --force -u numba -l dev "$whl"

      - name: Upload wheel (macOS)
        if: startsWith(matrix.platform, 'osx-')
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd dist
          whl=$(stat -f "%m %N" ./*.whl | sort -n | tail -n 1 | cut -d' ' -f2-)
          anaconda -t "$ANACONDA_API_TOKEN" upload --force -u numba -l dev "$whl"