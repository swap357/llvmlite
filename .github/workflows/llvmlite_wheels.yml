name: Build wheels

on:
  push:
    branches:
    - main
    tags:
    - v*
  pull_request:
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string
      upload_wheel_to_anaconda:
        description: 'Upload wheel to Anaconda Cloud - numba channel'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  FALLBACK_LLVMDEV_VERSION: "20"
  CONDA_CHANNEL_NUMBA: numba/label/llvm20-wheel
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  load-matrix:
    runs-on: ubuntu-latest
    outputs:
      build-matrix-json: ${{ steps.load_matrix_json.outputs.build-matrix-json }}
      test-matrix-json: ${{ steps.load_matrix_json.outputs.test-matrix-json }}
    steps:
      - uses: actions/checkout@v5
      - id: load_matrix_json
        name: Load Workflow Matrix JSON
        run: |
          BUILD_MATRIX_JSON=$(jq -c .wheel_build_matrix .github/workflows/wheel_workflow_matrix.json)
          TEST_MATRIX_JSON=$(jq -c '.wheel_test_matrix | map(. + {"python_tag": ("cp" + (."python-version" | split(".") | join("")))})' .github/workflows/wheel_workflow_matrix.json)
          echo "build-matrix-json=$BUILD_MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "test-matrix-json=$TEST_MATRIX_JSON" >> $GITHUB_OUTPUT

  build_wheels:
    name: build ${{ matrix.os }} (py ${{ matrix.build['python-version'] }})
    needs: load-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, ubuntu-22.04-arm, windows-2025]
        build: ${{ fromJson(needs.load-matrix.outputs.build-matrix-json) }}

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
          persist-credentials: false
          fetch-depth: 0

      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' }}
        uses: actions/download-artifact@v5
        with:
          name: llvmdev_for_wheel_${{ matrix.os }}
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.0
        env:
          # Keep most settings in pyproject.toml; minimally wire in build+test here.
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_PRERELEASE_PYTHONS: "1"
          CIBW_ARCHS_LINUX: "auto"
          CIBW_ARCHS_MACOS: "auto"
          CIBW_CONTAINER_ENGINE: "docker"
          CIBW_BUILD_VERBOSITY: "1"
          CIBW_BUILD: "${{ matrix.build.python_tag }}-*"

          # Install conda inside cibuildwheel environment (based on manylinux approach)
          CIBW_BEFORE_ALL_LINUX: |
            set -eux
            # Download and install miniconda (architecture-specific)
            if [[ "$(uname -m)" == "aarch64" ]]; then
              curl -L -o miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh
            else
              curl -L -o miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
            fi
            bash miniconda.sh -b -f -p $HOME/miniconda3
            $HOME/miniconda3/bin/conda init bash
            export PATH="$HOME/miniconda3/bin:$PATH"
            export CONDA_PLUGINS_AUTO_ACCEPT_TOS=true

          CIBW_BEFORE_ALL_MACOS: |
            set -eux
            # Download and install miniconda (architecture-specific)
            if [[ "$(uname -m)" == "arm64" ]]; then
              curl -L -o miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh
            else
              curl -L -o miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
            fi
            bash miniconda.sh -b -f -p $HOME/miniconda3
            $HOME/miniconda3/bin/conda init bash
            export PATH="$HOME/miniconda3/bin:$PATH"
            export CONDA_PLUGINS_AUTO_ACCEPT_TOS=true

          CIBW_BEFORE_ALL_WINDOWS: |
            curl -L -o miniconda.exe https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe
            ./miniconda.exe /InstallationType=JustMe /RegisterPython=0 /S /D=C:\miniconda
            C:\miniconda\Scripts\conda.exe init cmd.exe
            set PATH=C:\miniconda;C:\miniconda\Scripts;%PATH%
            set CONDA_PLUGINS_AUTO_ACCEPT_TOS=true

          # Build prerequisites (llvmlite requires llvmdev present at build time)
          CIBW_BEFORE_BUILD_LINUX: |
            set -eux
            export PATH="$HOME/miniconda3/bin:$PATH"
            export CONDA_PLUGINS_AUTO_ACCEPT_TOS=true
            # Activate conda base environment
            source $HOME/miniconda3/etc/profile.d/conda.sh
            conda activate base
            python -m pip install -U pip wheel

            # Install llvmdev using conda
            if [ "${{ inputs.llvmdev_run_id }}" != "" ]; then
              CHAN="file://${{ github.workspace }}/llvmdev_conda_packages"
              conda install -y -c defaults -c "$CHAN" "llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }}" --no-deps
            else
              conda install -y -c defaults "${{ env.CONDA_CHANNEL_NUMBA }}::llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }}" --no-deps
            fi
            
            # Create symlinks to make LLVM accessible to the build
            mkdir -p /opt/llvm
            # Create proper symlinks with absolute paths
            ln -sf $(realpath $HOME/miniconda3/lib/cmake/llvm) /opt/llvm/cmake
            ln -sf $(realpath $HOME/miniconda3/lib) /opt/llvm/lib
            ln -sf $(realpath $HOME/miniconda3/include) /opt/llvm/include
            # Also create the lib/cmake/llvm structure that CMake expects
            mkdir -p /opt/llvm/lib/cmake/llvm
            # Create symlinks for individual files, ignoring "same file" errors
            for file in $(realpath $HOME/miniconda3/lib/cmake/llvm/*); do
              ln -sf "$file" /opt/llvm/lib/cmake/llvm/ 2>/dev/null || true
            done
            export CMAKE_PREFIX_PATH="/opt/llvm"

          CIBW_BEFORE_BUILD_MACOS: |
            set -eux
            # Ensure conda is available and activated
            export PATH="$HOME/miniconda3/bin:$PATH"
            export CONDA_PLUGINS_AUTO_ACCEPT_TOS=true
            # Activate conda base environment
            source $HOME/miniconda3/etc/profile.d/conda.sh
            conda activate base
            python -m pip install -U pip wheel

            # Install llvmdev using conda
            if [ "${{ inputs.llvmdev_run_id }}" != "" ]; then
              CHAN="file://${{ github.workspace }}/llvmdev_conda_packages"
              conda install -y -c defaults -c "$CHAN" "llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }}" --no-deps
            else
              conda install -y -c defaults "${{ env.CONDA_CHANNEL_NUMBA }}::llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }}" --no-deps
            fi
            
            # Create symlinks to make LLVM accessible to the build
            sudo mkdir -p /opt/llvm
            # Create proper symlinks with absolute paths
            sudo ln -sf $(realpath $HOME/miniconda3/lib/cmake/llvm) /opt/llvm/cmake
            sudo ln -sf $(realpath $HOME/miniconda3/lib) /opt/llvm/lib
            sudo ln -sf $(realpath $HOME/miniconda3/include) /opt/llvm/include
            # Also create the lib/cmake/llvm structure that CMake expects
            sudo mkdir -p /opt/llvm/lib/cmake/llvm
            # Create symlinks for individual files, ignoring "same file" errors
            for file in $(realpath $HOME/miniconda3/lib/cmake/llvm/*); do
              sudo ln -sf "$file" /opt/llvm/lib/cmake/llvm/ 2>/dev/null || true
            done
            export CMAKE_PREFIX_PATH="/opt/llvm"

          CIBW_BEFORE_BUILD_WINDOWS: |
            # Ensure conda is available
            set PATH=C:\miniconda;C:\miniconda\Scripts;%PATH%
            python -m pip install -U pip wheel

            # Install llvmdev using conda
            if "%{{ inputs.llvmdev_run_id }}" neq "" (
              set CHAN=file:///%{{ github.workspace }}/llvmdev_conda_packages
              C:\miniconda\Scripts\conda.exe install -y -c defaults -c "%CHAN%" "llvmdev=%{{ env.FALLBACK_LLVMDEV_VERSION }}" --no-deps
            ) else (
              C:\miniconda\Scripts\conda.exe install -y -c defaults "%{{ env.CONDA_CHANNEL_NUMBA }}::llvmdev=%{{ env.FALLBACK_LLVMDEV_VERSION }}" --no-deps
            # Set CMAKE_PREFIX_PATH for LLVM CMake files
            set CMAKE_PREFIX_PATH=C:\miniconda\lib\cmake\llvm\

          # Windows repair: use delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: |
            python -m pip install delvewheel
            python -m delvewheel repair --analyze-existing -w {dest_dir} {wheel}

          # Environment variables
          CIBW_ENVIRONMENT: |
            LLVMLITE_PACKAGE_FORMAT=wheel
            MACOSX_DEPLOYMENT_TARGET=11.0
            LDFLAGS=-v -Wl,-rpath,/usr/lib
            CMAKE_PREFIX_PATH=/root/miniconda3/lib/cmake/llvm/

          CIBW_ENVIRONMENT_LINUX: |
            LLVMLITE_PACKAGE_FORMAT=wheel
            CMAKE_PREFIX_PATH=/opt/llvm

          CIBW_ENVIRONMENT_MACOS: |
            LLVMLITE_PACKAGE_FORMAT=wheel
            MACOSX_DEPLOYMENT_TARGET=11.0
            CMAKE_PREFIX_PATH=/opt/llvm

          CIBW_ENVIRONMENT_WINDOWS: |
            LLVMLITE_PACKAGE_FORMAT=wheel
            CMAKE_PREFIX_PATH=C:\miniconda\lib\cmake\llvm\

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.build.python_tag }}
          path: ./wheelhouse/*.whl
          compression-level: 0
          if-no-files-found: error

  test_wheels:
    name: test ${{ matrix.os }} (py ${{ matrix.test.python-version }})
    needs: [load-matrix, build_wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, ubuntu-22.04-arm, windows-2025]
        test: ${{ fromJson(needs.load-matrix.outputs.test-matrix-json) }}

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.test['python-version'] }}
          allow-prereleases: true

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.test.python_tag }}
          path: dist

      - name: Install and test wheel
        run: |
          PY=$(python -c 'import sys; print(sys.executable)')
          $PY -m pip install -U pip
          $PY -m pip install numpy==${{ matrix.test.numpy_test }} pytest lief
          $PY -m pip install dist/*.whl
          $PY -m llvmlite.tests

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz
          compression-level: 0
          if-no-files-found: error

  upload_wheels:
    name: Upload wheels to Anaconda Cloud
    needs: [load-matrix, test_wheels]
    if: github.event_name == 'workflow_dispatch' && inputs.upload_wheel_to_anaconda
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14, ubuntu-22.04-arm, windows-2025]
        test: ${{ fromJson(needs.load-matrix.outputs.test-matrix-json) }}

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install anaconda-client
        run: python -m pip install anaconda-client

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.test.python_tag }}
          path: wheelhouse

      - name: Upload wheels to Anaconda Cloud
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd wheelhouse
          for wheel in *.whl; do
            echo "Uploading $wheel"
            anaconda -t "$ANACONDA_API_TOKEN" upload --force -u numba -l dev "$wheel"
          done