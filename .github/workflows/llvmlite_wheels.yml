name: llvmlite_wheels

on:
  pull_request:
    paths:
      - .github/workflows/llvmlite_wheels.yml
      - 'llvmlite/**'
      - 'ffi/**'
      - 'setup.py'
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string
      upload_wheel_to_anaconda:
        description: 'Upload wheel to Anaconda Cloud - numba channel'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  FALLBACK_LLVMDEV_VERSION: "20"
  CONDA_CHANNEL_NUMBA: numba/label/llvm20-wheel
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  build_wheels:
    name: build ${{ matrix.platform_label }} (python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform_label: linux-64
            python-version: "3.10"
          - os: ubuntu-latest
            platform_label: linux-64
            python-version: "3.11"
          - os: ubuntu-latest
            platform_label: linux-64
            python-version: "3.12"
          - os: ubuntu-latest
            platform_label: linux-64
            python-version: "3.13"
          - os: ubuntu-latest
            platform_label: linux-64
            python-version: "3.14"
          - os: ubuntu-24.04-arm
            platform_label: linux-aarch64
            python-version: "3.10"
          - os: ubuntu-24.04-arm
            platform_label: linux-aarch64
            python-version: "3.11"
          - os: ubuntu-24.04-arm
            platform_label: linux-aarch64
            python-version: "3.12"
          - os: ubuntu-24.04-arm
            platform_label: linux-aarch64
            python-version: "3.13"
          - os: ubuntu-24.04-arm
            platform_label: linux-aarch64
            python-version: "3.14"
          - os: windows-2025
            platform_label: win-64
            python-version: "3.10"
          - os: windows-2025
            platform_label: win-64
            python-version: "3.11"
          - os: windows-2025
            platform_label: win-64
            python-version: "3.12"
          - os: windows-2025
            platform_label: win-64
            python-version: "3.13"
          - os: windows-2025
            platform_label: win-64
            python-version: "3.14"
          - os: macos-14
            platform_label: osx-arm64
            python-version: "3.10"
          - os: macos-14
            platform_label: osx-arm64
            python-version: "3.11"
          - os: macos-14
            platform_label: osx-arm64
            python-version: "3.12"
          - os: macos-14
            platform_label: osx-arm64
            python-version: "3.13"
          - os: macos-14
            platform_label: osx-arm64
            python-version: "3.14"

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: llvmdev_for_wheel_${{ matrix.platform_label }}
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        env:
          CIBW_BUILD: cp310-* cp311-* cp312-* cp313-* cp314-*
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_PRERELEASE_PYTHONS: "1"
          CIBW_ARCHS_LINUX: "auto"
          CIBW_ARCHS_MACOS: "auto"
          CIBW_CONTAINER_ENGINE: "docker"
          CIBW_BUILD_VERBOSITY: "1"

          CIBW_BEFORE_BUILD: |
            # Install llvmdev dependency (only for Windows and macOS)
            if [ "${{ matrix.platform_label }}" = "win-64" ] || [ "${{ matrix.platform_label }}" = "osx-arm64" ]; then
              # Install miniconda using existing script
              bash ${{ github.workspace }}/buildscripts/incremental/install_miniconda.sh

              # Set up conda environment
              export PATH="$HOME/miniconda3/bin:$PATH"
              export CONDA_PREFIX="$HOME/miniconda3"

              # Initialize conda
              conda init bash
              source ~/.bashrc || true

              if [ "${{ inputs.llvmdev_run_id }}" != "" ]; then
                if [ "${{ matrix.platform_label }}" = "win-64" ]; then
                  CHAN="file:///${{ github.workspace }}/llvmdev_conda_packages"
                else
                  CHAN="file://${{ github.workspace }}/llvmdev_conda_packages"
                fi
                conda install -c defaults -c "$CHAN" "llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }}"
              else
                CHAN="${{ env.CONDA_CHANNEL_NUMBA }}"
                conda install -c defaults "${CHAN}::llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }}"
              fi

              # Platform-specific additional dependencies
              if [ "${{ matrix.platform_label }}" = "win-64" ]; then
                conda install -c defaults cmake libxml2
              elif [ "${{ matrix.platform_label }}" = "osx-arm64" ]; then
                # Hide libunwind to prevent linking issues
                mkdir -p "$CONDA_PREFIX/lib/hide_unwind"
                mv "$CONDA_PREFIX/lib/libunwind"*.dylib "$CONDA_PREFIX/lib/hide_unwind/" 2>/dev/null || true
              fi
            fi

          CIBW_REPAIR_WHEEL_COMMAND: |
            if [ "${{ matrix.platform_label }}" = "win-64" ]; then
              python -m pip install delvewheel
              python -m delvewheel repair --analyze-existing -w {dest_dir} {wheel}
            fi
          CIBW_ENVIRONMENT: |
            LLVMLITE_PACKAGE_FORMAT=wheel
            MACOSX_DEPLOYMENT_TARGET=11.0
            LDFLAGS=-v -Wl,-rpath,/usr/lib
        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: llvmlite-wheels-${{ matrix.platform_label }}-py${{ matrix.python-version }}
          path: wheelhouse/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

  validate_wheels:
    name: validate ${{ matrix.platform_label }} (python ${{ matrix.python-version }})
    needs: build_wheels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform_label: linux-64
            python-version: "3.10"
          - platform_label: linux-64
            python-version: "3.11"
          - platform_label: linux-64
            python-version: "3.12"
          - platform_label: linux-64
            python-version: "3.13"
          - platform_label: linux-64
            python-version: "3.14"
          - platform_label: linux-aarch64
            python-version: "3.10"
          - platform_label: linux-aarch64
            python-version: "3.11"
          - platform_label: linux-aarch64
            python-version: "3.12"
          - platform_label: linux-aarch64
            python-version: "3.13"
          - platform_label: linux-aarch64
            python-version: "3.14"
          - platform_label: win-64
            python-version: "3.10"
          - platform_label: win-64
            python-version: "3.11"
          - platform_label: win-64
            python-version: "3.12"
          - platform_label: win-64
            python-version: "3.13"
          - platform_label: win-64
            python-version: "3.14"
          - platform_label: osx-arm64
            python-version: "3.10"
          - platform_label: osx-arm64
            python-version: "3.11"
          - platform_label: osx-arm64
            python-version: "3.12"
          - platform_label: osx-arm64
            python-version: "3.13"
          - platform_label: osx-arm64
            python-version: "3.14"

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'

      - name: Install validation dependencies
        run: python -m pip install wheel twine

      - name: Download wheels
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: llvmlite-wheels-${{ matrix.platform_label }}-py${{ matrix.python-version }}
          path: wheelhouse

      - name: Validate wheels
        run: |
          cd wheelhouse
          for wheel in *.whl; do
            echo "Validating $wheel"
            twine check "$wheel"
          done

  test_wheels:
    name: test ${{ matrix.platform_label }} (python ${{ matrix.python-version }})
    needs: build_wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform_label: linux-64
            python-version: "3.10"
          - os: ubuntu-latest
            platform_label: linux-64
            python-version: "3.11"
          - os: ubuntu-latest
            platform_label: linux-64
            python-version: "3.12"
          - os: ubuntu-latest
            platform_label: linux-64
            python-version: "3.13"
          - os: ubuntu-latest
            platform_label: linux-64
            python-version: "3.14"
          - os: ubuntu-24.04-arm
            platform_label: linux-aarch64
            python-version: "3.10"
          - os: ubuntu-24.04-arm
            platform_label: linux-aarch64
            python-version: "3.11"
          - os: ubuntu-24.04-arm
            platform_label: linux-aarch64
            python-version: "3.12"
          - os: ubuntu-24.04-arm
            platform_label: linux-aarch64
            python-version: "3.13"
          - os: ubuntu-24.04-arm
            platform_label: linux-aarch64
            python-version: "3.14"
          - os: windows-2025
            platform_label: win-64
            python-version: "3.10"
          - os: windows-2025
            platform_label: win-64
            python-version: "3.11"
          - os: windows-2025
            platform_label: win-64
            python-version: "3.12"
          - os: windows-2025
            platform_label: win-64
            python-version: "3.13"
          - os: windows-2025
            platform_label: win-64
            python-version: "3.14"
          - os: macos-14
            platform_label: osx-arm64
            python-version: "3.10"
          - os: macos-14
            platform_label: osx-arm64
            python-version: "3.11"
          - os: macos-14
            platform_label: osx-arm64
            python-version: "3.12"
          - os: macos-14
            platform_label: osx-arm64
            python-version: "3.13"
          - os: macos-14
            platform_label: osx-arm64
            python-version: "3.14"

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheels
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: llvmlite-wheels-${{ matrix.platform_label }}-py${{ matrix.python-version }}
          path: wheelhouse

      - name: Install and test wheels
        env:
          LLVMLITE_DIST_TEST: "1"
        run: |
          # Upgrade pip and install wheel
          python -m pip install --upgrade pip wheel

          # Install test dependencies
          python -m pip install lief

          # Install and test each wheel
          cd wheelhouse
          for wheel in *.whl; do
            echo "Testing wheel: $wheel"
            python -m pip install "$wheel"
            python -m llvmlite.tests
            python -m pip uninstall -y llvmlite
          done

  upload_wheels:
    name: Upload wheels to Anaconda Cloud
    needs: [validate_wheels, test_wheels]
    if: github.event_name == 'workflow_dispatch' && inputs.upload_wheel_to_anaconda
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform_label: linux-64
            python-version: "3.10"
          - platform_label: linux-64
            python-version: "3.11"
          - platform_label: linux-64
            python-version: "3.12"
          - platform_label: linux-64
            python-version: "3.13"
          - platform_label: linux-64
            python-version: "3.14"
          - platform_label: linux-aarch64
            python-version: "3.10"
          - platform_label: linux-aarch64
            python-version: "3.11"
          - platform_label: linux-aarch64
            python-version: "3.12"
          - platform_label: linux-aarch64
            python-version: "3.13"
          - platform_label: linux-aarch64
            python-version: "3.14"
          - platform_label: win-64
            python-version: "3.10"
          - platform_label: win-64
            python-version: "3.11"
          - platform_label: win-64
            python-version: "3.12"
          - platform_label: win-64
            python-version: "3.13"
          - platform_label: win-64
            python-version: "3.14"
          - platform_label: osx-arm64
            python-version: "3.10"
          - platform_label: osx-arm64
            python-version: "3.11"
          - platform_label: osx-arm64
            python-version: "3.12"
          - platform_label: osx-arm64
            python-version: "3.13"
          - platform_label: osx-arm64
            python-version: "3.14"

    steps:
      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'

      - name: Install anaconda-client
        run: python -m pip install anaconda-client

      - name: Download wheels
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: llvmlite-wheels-${{ matrix.platform_label }}-py${{ matrix.python-version }}
          path: wheelhouse

      - name: Upload wheels to Anaconda Cloud
        env:
          ANACONDA_API_TOKEN: ${{ secrets.NUMBA_CHANNEL_WHEEL_UPLOAD }}
        run: |
          cd wheelhouse
          for wheel in *.whl; do
            echo "Uploading $wheel"
            anaconda -t "$ANACONDA_API_TOKEN" upload --force -u numba -l dev "$wheel"
          done
