name: llvmlite_osx-64_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/llvmlite_osx-64_wheel_builder.yml
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  LOCAL_LLVMDEV_ARTIFACT_PATH: ${{ github.workspace }}/llvmdev_conda_packages
  FALLBACK_LLVMDEV_VERSION: "15"
  CONDA_CHANNEL_NUMBA: numba/label/osx_wheel
  VALIDATION_PYTHON_VERSION: "3.12"
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  osx-64-build:
    name: osx-64-build
    runs-on: macos-13
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for cached wheel
        id: cache-wheel
        uses: actions/cache@v4
        with:
          path: dist/*.whl
          key: wheel-v8-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
          restore-keys: |
            wheel-v8-${{ matrix.python-version }}-

      - name: Debug cache status
        run: |
          echo "Cache hit status: ${{ steps.cache-wheel.outputs.cache-hit }}"
          echo "Cache key: wheel-v8-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}"
          echo "Cache hit value type: $(echo ${{ steps.cache-wheel.outputs.cache-hit }} | xxd)"
          ls -la dist/ || true

      - name: Setup Miniconda
        if: ${{ steps.cache-wheel.outputs.cache-hit != 'true' }}
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' && steps.cache-wheel.outputs.cache-hit != 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: llvmdev_osx-64
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install build dependencies
        if: ${{ steps.cache-wheel.outputs.cache-hit != 'true' }}
        run: |
          set -x
          if [ "${{ inputs.llvmdev_run_id }}" != "" ]; then
              CHAN="file:///${{ env.LOCAL_LLVMDEV_ARTIFACT_PATH }}"
          else
              CHAN="${{ env.CONDA_CHANNEL_NUMBA }}"
          fi
          # Removed delocate install
          conda install -c "$CHAN" llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }} cmake libxml2 python-build
          # conda install -c conda-forge delocate # Reverted change

      - name: Build wheel
        if: ${{ steps.cache-wheel.outputs.cache-hit != 'true' }}
        run: python -m build

      - name: Fix macOS wheel library paths manually
        if: ${{ steps.cache-wheel.outputs.cache-hit != 'true' }}
        run: |
          set -ex # Exit on error, print commands
          cd dist
          # Get the most recent wheel
          whl=$(ls -t *.whl | head -n 1)
          echo "Processing wheel: $whl"
          
          # Define the directory where libs will be copied inside the wheel
          dest_lib_dir="llvmlite/binding" # Relative path within the unpacked wheel
          
          # Unpack the wheel
          wheel unpack "$whl"
          unpacked_dir=$(echo "$whl" | cut -d "-" -f1 -f2)
          
          # Find the target dylib within the unpacked wheel
          target_dylib="$unpacked_dir/$dest_lib_dir/libllvmlite.dylib"
          echo "Target dylib: $target_dylib"
          
          echo "=== BEFORE copying libs and fixing paths ==="
          otool -L "$target_dylib"
          
          # Define libraries to copy and fix paths for
          libs_to_fix=("libz.1.dylib" "libc++.1.dylib" "libunwind.1.dylib")
          
          # Find and copy libraries from Conda env to the wheel dir
          echo "--- Copying libraries from $CONDA_PREFIX/lib ---"
          for lib in "${libs_to_fix[@]}"; do
            conda_lib_path=$(find "$CONDA_PREFIX/lib" -name "$lib" | head -n 1)
            if [ -z "$conda_lib_path" ]; then
              echo "ERROR: Cannot find $lib in $CONDA_PREFIX/lib"
              exit 1
            fi
            echo "Copying $conda_lib_path to $unpacked_dir/$dest_lib_dir/"
            cp "$conda_lib_path" "$unpacked_dir/$dest_lib_dir/"
          done
          
          # Change library paths in target dylib to use @loader_path
          echo "--- Modifying library paths in $target_dylib ---"
          for lib in "${libs_to_fix[@]}"; do
            # Get the original path from otool output (might be @rpath or absolute)
            original_path=$(otool -L "$target_dylib" | grep "$lib" | awk '{print $1}')
            if [ -z "$original_path" ]; then
              echo "WARNING: Did not find original path for $lib in $target_dylib"
              continue # Skip if library not found in otool output
            fi
            loader_path="@loader_path/$lib"
            echo "Changing $original_path to $loader_path"
            install_name_tool -change "$original_path" "$loader_path" "$target_dylib"
          done

          # Also fix the id of the copied libraries themselves, if needed
          # This ensures they find each other if they have cross-dependencies
          echo "--- Fixing library IDs for copied libraries ---"
          for lib in "${libs_to_fix[@]}"; do
             copied_lib_path="$unpacked_dir/$dest_lib_dir/$lib"
             if [ -f "$copied_lib_path" ]; then
                 echo "Setting ID for $copied_lib_path to @loader_path/$lib"
                 install_name_tool -id "@loader_path/$lib" "$copied_lib_path"
             fi
          done

          echo "=== AFTER copying libs and fixing paths ==="
          otool -L "$target_dylib"
          echo "--- Contents of $unpacked_dir/$dest_lib_dir ---"
          ls -l "$unpacked_dir/$dest_lib_dir"
          
          # Remove the original wheel file before packing
          rm "$whl" 
          
          # Repack the wheel
          echo "--- Repacking wheel ---"
          cd "$unpacked_dir"
          wheel pack .
          # Move the repacked wheel back to the dist directory
          mv *.whl ../
          cd .. # Back to dist directory
          
          echo "=== Final wheel filename ==="
          ls -la *.whl # Should show the repacked wheel

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: llvmlite-osx-64-py${{ matrix.python-version }}
          path: dist/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

  osx-64-validate:
    name: osx-64-validate
    needs: osx-64-build
    if: github.event_name == 'pull_request' && !needs.osx-64-build.outputs.cache-hit
    runs-on: macos-13
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install validation dependencies
        run: conda install -c defaults wheel twine keyring rfc3986

      - name: Download llvmlite wheels
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-64-py${{ matrix.python-version }}
          path: dist

      - name: Validate wheels
        run: |
          set -e  # Exit on any error
          cd dist
          
          for WHL_FILE in *.whl; do
            echo "=== Validating $WHL_FILE ==="
            
            # Check wheel structure
            twine check "$WHL_FILE"
            
            # Check dylib paths
            wheel unpack "$WHL_FILE"
            WHEEL_DIR=$(echo "$WHL_FILE" | cut -d "-" -f1 -f2)
            DYLIB=$(find "$WHEEL_DIR" -iname "libllvmlite.dylib")
            
            if [ -z "$DYLIB" ]; then
              echo "Error: libllvmlite.dylib not found in $WHL_FILE"
              exit 1
            fi
            
            echo "=== Checking dynamic library dependencies ==="
            otool -L "$DYLIB"
            
            # Verify library paths
            LIBS=("libz.1.dylib" "libc++.1.dylib")
            for LIB in "${LIBS[@]}"; do
              if ! otool -L "$DYLIB" | grep -q "/usr/lib/$LIB"; then
                echo "Error: $LIB path is incorrect in $WHL_FILE"
                exit 1
              fi
            done
          done

  osx-64-test:
    name: osx-64-test
    needs: osx-64-build
    runs-on: macos-13
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-64-py${{ matrix.python-version }}
          path: dist

      - name: Install and test
        run: |
          # Get the Python executable path
          PYTHON_PATH=$(which python${{ matrix.python-version }})
          
          # Upgrade pip and install wheel
          $PYTHON_PATH -m pip install --upgrade pip wheel

          # Install wheel and run tests (Removed wheel tags modification)
          cd dist
          whl=$(ls -t *.whl | head -n 1)
          echo "Using wheel: $whl"
          $PYTHON_PATH -m pip install -v "$whl"
          
          # Run tests
          $PYTHON_PATH -m llvmlite.tests