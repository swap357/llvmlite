name: llvmlite_osx-64_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/llvmlite_osx-64_wheel_builder.yml
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  LOCAL_LLVMDEV_ARTIFACT_PATH: ${{ github.workspace }}/llvmdev_conda_packages
  FALLBACK_LLVMDEV_VERSION: "15"
  CONDA_CHANNEL_NUMBA: numba/label/osx_wheel
  VALIDATION_PYTHON_VERSION: "3.12"
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  osx-64-build:
    name: osx-64-build
    runs-on: macos-13
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for cached wheel
        id: cache-wheel
        uses: actions/cache@v4
        with:
          path: dist/*.whl
          key: wheel-v9-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
          restore-keys: |
            wheel-v9-${{ matrix.python-version }}-

      - name: Debug cache status
        run: |
          echo "Cache hit status: ${{ steps.cache-wheel.outputs.cache-hit }}"
          echo "Cache key: wheel-v9-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}"
          echo "Cache hit value type: $(echo ${{ steps.cache-wheel.outputs.cache-hit }} | xxd)"
          ls -la dist/ || true

      - name: Setup Miniconda
        if: ${{ steps.cache-wheel.outputs.cache-hit != 'true' }}
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Download llvmdev Artifact
        if: ${{ inputs.llvmdev_run_id != '' && steps.cache-wheel.outputs.cache-hit != 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: llvmdev_osx-64
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install build dependencies
        if: ${{ steps.cache-wheel.outputs.cache-hit != 'true' }}
        run: |
          set -x
          if [ "${{ inputs.llvmdev_run_id }}" != "" ]; then
              CHAN="file:///${{ env.LOCAL_LLVMDEV_ARTIFACT_PATH }}"
          else
              CHAN="${{ env.CONDA_CHANNEL_NUMBA }}"
          fi
          # Re-add delocate install
          conda install -c "$CHAN" llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }} cmake libxml2 python-build
          conda install -c conda-forge delocate

      - name: Build wheel
        if: ${{ steps.cache-wheel.outputs.cache-hit != 'true' }}
        run: python -m build

      - name: Fix macOS wheel library paths using delocate
        if: ${{ steps.cache-wheel.outputs.cache-hit != 'true' }}
        run: |
          set -ex # Exit on error, print commands
          cd dist
          # Get the most recent wheel
          whl=$(ls -t *.whl | head -n 1)
          echo "Processing wheel: $whl"
          
          echo "=== BEFORE DELOCATE ==="
          # Unpack just to check initial links
          wheel unpack "$whl"
          target_dir=$(echo "$whl" | cut -d "-" -f1 -f2)
          target=$(find "$target_dir" -iname "libllvmlite.dylib")
          otool -L "$target"
          rm -rf "$target_dir" # Clean up unpacked dir
          
          # Run delocate, telling it where to find libs referenced by @rpath
          echo "--- Running delocate-wheel with library path hint ---"
          delocate-wheel -L $CONDA_PREFIX/lib -v "$whl"
          
          echo "=== AFTER DELOCATE ==="
          # Check links again after delocate
          wheel unpack "$whl"
          target_dir=$(echo "$whl" | cut -d "-" -f1 -f2)
          target=$(find "$target_dir" -iname "libllvmlite.dylib")
          otool -L "$target"
          # Check for bundled libs
          echo "--- Checking for bundled libraries in .dylibs ---"
          ls -l "$target_dir/llvmlite/.dylibs/" || echo "No .dylibs directory found or it's empty"
          rm -rf "$target_dir" # Clean up unpacked dir
          
          echo "=== Final wheel filename ==="
          ls -la "$whl"

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: llvmlite-osx-64-py${{ matrix.python-version }}
          path: dist/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

  osx-64-validate:
    name: osx-64-validate
    needs: osx-64-build
    if: github.event_name == 'pull_request' && !needs.osx-64-build.outputs.cache-hit
    runs-on: macos-13
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install validation dependencies
        run: conda install -c defaults wheel twine keyring rfc3986

      - name: Download llvmlite wheels
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-64-py${{ matrix.python-version }}
          path: dist

      - name: Validate wheels
        run: |
          set -e # Exit on error
          cd dist

          for WHL_FILE in *.whl; do
            echo "=== Validating $WHL_FILE ==="
            twine check "$WHL_FILE"

            wheel unpack "$WHL_FILE"
            WHEEL_DIR=$(echo "$WHL_FILE" | cut -d "-" -f1 -f2)
            DYLIB="$WHEEL_DIR/llvmlite/binding/libllvmlite.dylib"
            DYLIBS_DIR="$WHEEL_DIR/llvmlite/.dylibs"

            # Check essential components exist
            [ -f "$DYLIB" ] || { echo "ERROR: $DYLIB not found"; exit 1; }
            [ -d "$DYLIBS_DIR" ] || { echo "ERROR: $DYLIBS_DIR not found"; exit 1; }

            # Check main dylib linking properties using otool and grep
            otool -L "$DYLIB" | grep -q "/usr/lib/libSystem.B.dylib" || { echo "ERROR: System lib link missing or incorrect"; otool -L "$DYLIB"; exit 1; }
            otool -l "$DYLIB" | grep -A 2 LC_RPATH | grep -q 'path @loader_path/.dylibs' || { echo "ERROR: RPATH '@loader_path/.dylibs' missing"; otool -l "$DYLIB" | grep LC_RPATH -A 3; exit 1; }

            # Check bundled libraries (existence and linkage)
            for LIB in libz.1.dylib libc++.1.dylib libunwind.1.dylib; do
              [ -f "$DYLIBS_DIR/$LIB" ] || { echo "ERROR: Bundled lib $LIB missing in $DYLIBS_DIR"; ls -l "$DYLIBS_DIR"; exit 1; }
              otool -L "$DYLIB" | grep -q "@rpath/$LIB" || { echo "ERROR: Link @rpath/$LIB missing in $DYLIB for $LIB"; otool -L "$DYLIB"; exit 1; }
            done

            # Clean up
            rm -rf "$WHEEL_DIR"
            echo "=== Validation successful for $WHL_FILE ==="
          done

  osx-64-test:
    name: osx-64-test
    needs: osx-64-build
    runs-on: macos-13
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-64-py${{ matrix.python-version }}
          path: dist

      - name: Install and test
        run: |
          # Get the Python executable path
          PYTHON_PATH=$(which python${{ matrix.python-version }})
          
          # Upgrade pip and install wheel
          $PYTHON_PATH -m pip install --upgrade pip wheel

          # Install wheel and run tests (Removed wheel tags modification)
          cd dist
          whl=$(ls -t *.whl | head -n 1)
          echo "Using wheel: $whl"
          $PYTHON_PATH -m pip install -v "$whl"
          
          # Run tests
          $PYTHON_PATH -m llvmlite.tests