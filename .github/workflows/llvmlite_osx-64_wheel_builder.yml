name: llvmlite_osx-64_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/llvmlite_osx-64_wheel_builder.yml
  workflow_dispatch:
    inputs:
      llvmdev_run_id:
        description: 'llvmdev workflow run ID (optional)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  LOCAL_LLVMDEV_ARTIFACT_PATH: ${{ github.workspace }}/llvmdev_conda_packages
  FALLBACK_LLVMDEV_VERSION: "15"
  CONDA_CHANNEL_NUMBA: numba/label/osx_wheel
  VALIDATION_PYTHON_VERSION: "3.12"
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  osx-64-build:
    name: osx-64-build
    runs-on: macos-13
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Download llvmdev Artifact
        uses: actions/download-artifact@v4
        with:
          name: llvmdev_osx-64
          path: llvmdev_conda_packages
          run-id: ${{ inputs.llvmdev_run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show Available SDKs
        run: xcodebuild -showsdks

      - name: Install build dependencies
        run: |
          set -x
          if [ "${{ inputs.llvmdev_run_id }}" != "" ]; then
              CHAN="file:///${{ env.LOCAL_LLVMDEV_ARTIFACT_PATH }}"
          else
              CHAN="${{ env.CONDA_CHANNEL_NUMBA }}"
          fi
          conda install -c "$CHAN" llvmdev=${{ env.FALLBACK_LLVMDEV_VERSION }} cmake libxml2 python-build

      - name: Build wheel
        run: python -m build

      - name: Fix macOS wheel library paths
        run: |
          set -ex # Exit on error, print commands
          cd dist
          whl=$(ls -t *.whl | head -n 1)
          echo "Processing wheel: $whl"
          
          # Unpack and define paths
          wheel unpack "$whl"
          unpacked_dir=$(echo "$whl" | cut -d "-" -f1 -f2)
          dest_lib_dir="$unpacked_dir/llvmlite/binding"
          target_dylib="$dest_lib_dir/libllvmlite.dylib"
          
          [ -f "$target_dylib" ] || { echo "ERROR: Target dylib $target_dylib not found"; exit 1; }
          echo "Target dylib: $target_dylib"
          echo "=== BEFORE fixing paths ==="
          otool -L "$target_dylib"
          
          # Define libs to copy/fix
          libs_to_fix=("libz.1.dylib" "libc++.1.dylib" "libunwind.1.dylib")
          
          # Find, copy, and fix paths/IDs
          for lib in "${libs_to_fix[@]}"; do
            conda_lib_path=$(find "$CONDA_PREFIX/lib" -name "$lib" | head -n 1)
            [ -n "$conda_lib_path" ] || { echo "ERROR: Cannot find $lib in $CONDA_PREFIX/lib"; exit 1; }
            echo "Copying $conda_lib_path to $dest_lib_dir/"
            cp "$conda_lib_path" "$dest_lib_dir/"
            
            original_path=$(otool -L "$target_dylib" | grep "$lib" | awk '{print $1}')
            loader_path="@loader_path/$lib"
            # Only run install_name_tool -change if the original path was found
            [ -z "$original_path" ] || install_name_tool -change "$original_path" "$loader_path" "$target_dylib"
            # Always set the ID for the copied library
            install_name_tool -id "$loader_path" "$dest_lib_dir/$lib"
          done

          echo "=== AFTER fixing paths ==="
          otool -L "$target_dylib"
          ls -l "$dest_lib_dir"
          
          # Repack wheel
          rm "$whl"
          echo "--- Repacking wheel ---"
          cd "$unpacked_dir"
          wheel pack .
          echo "--- Moving repacked wheel ---"
          mv *.whl ../
          cd .. # Back to dist directory
          
          echo "--- Final wheel in dist directory ---"
          ls -la *.whl # List the wheel in the current (dist) directory

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: llvmlite-osx-64-py${{ matrix.python-version }}
          path: dist/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

  osx-64-validate:
    name: osx-64-validate
    needs: osx-64-build
    runs-on: macos-13
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.VALIDATION_PYTHON_VERSION }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install validation dependencies
        run: conda install -c defaults wheel twine keyring rfc3986

      - name: Download llvmlite wheels
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-64-py${{ matrix.python-version }}
          path: dist

      - name: Validate wheels
        run: |
          set -e # Exit on error
          cd dist

          for WHL_FILE in *.whl; do
            echo "=== Validating $WHL_FILE ==="
            twine check "$WHL_FILE"

            wheel unpack "$WHL_FILE"
            WHEEL_DIR=$(echo "$WHL_FILE" | cut -d "-" -f1 -f2)
            DYLIB_DIR="$WHEEL_DIR/llvmlite/binding"
            DYLIB="$DYLIB_DIR/libllvmlite.dylib"

            # Check essential components exist
            [ -f "$DYLIB" ] || { echo "ERROR: $DYLIB not found"; exit 1; }

            # Check main dylib linking properties
            echo "--- Checking links for $DYLIB ---"
            otool -L "$DYLIB"
            otool -L "$DYLIB" | grep -q "/usr/lib/libSystem.B.dylib" || { echo "ERROR: System lib link missing or incorrect"; exit 1; }

            # Check bundled libraries (existence and linkage in same dir)
            echo "--- Checking bundled libraries in $DYLIB_DIR ---"
            ls -l "$DYLIB_DIR"
            for LIB in libz.1.dylib libc++.1.dylib libunwind.1.dylib; do
              [ -f "$DYLIB_DIR/$LIB" ] || { echo "ERROR: Bundled lib $LIB missing in $DYLIB_DIR"; exit 1; }
              otool -L "$DYLIB" | grep -q "@loader_path/$LIB" || { echo "ERROR: Link @loader_path/$LIB missing in $DYLIB for $LIB"; exit 1; }
            done
            echo "Bundled library checks passed."

            # Clean up
            rm -rf "$WHEEL_DIR"
            echo "=== Validation successful for $WHL_FILE ==="
          done

  osx-64-test:
    name: osx-64-test
    needs: osx-64-build
    runs-on: macos-13
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download llvmlite wheel
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-64-py${{ matrix.python-version }}
          path: dist

      - name: Install and test
        run: |
          # Get the Python executable path
          PYTHON_PATH=$(which python${{ matrix.python-version }})
          
          # Upgrade pip and install wheel
          $PYTHON_PATH -m pip install --upgrade pip wheel

          # Install wheel and run tests (Removed wheel tags modification)
          cd dist
          whl=$(ls -t *.whl | head -n 1)
          echo "Using wheel: $whl"
          $PYTHON_PATH -m pip install -v "$whl"
          
          # Run tests
          $PYTHON_PATH -m llvmlite.tests