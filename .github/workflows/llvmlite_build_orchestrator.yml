name: LLVMLite Build Orchestrator

on:
  workflow_dispatch:
    inputs:
      build_platforms:
        description: 'Platforms to build'
        required: true
        type: choice
        options:
          - all
          - linux
          - osx
          - win
          - arm
      build_type:
        description: 'Build type'
        required: true
        type: choice
        options:
          - all
          - conda
          - wheel
      python_versions:
        description: 'Python versions (comma-separated, e.g., "3.10,3.11,3.12,3.13" or "all")'
        required: true
        default: 'all'
        type: string
      llvmdev_run_id:
        description: 'LLVM Dev workflow run ID (optional)'
        required: false
        type: string
      upload_wheels:
        description: 'Upload wheels to Anaconda Cloud'
        required: false
        type: boolean
        default: false

jobs:
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      platform_matrix: ${{ steps.set-matrix.outputs.platform_matrix }}
      python_matrix: ${{ steps.set-matrix.outputs.python_matrix }}
    steps:
      - name: Set up matrices
        id: set-matrix
        run: |
          # Set platform matrix based on input
          case "${{ inputs.build_platforms }}" in
            "all")
              echo "platform_matrix=linux-64,linux-aarch64,osx-64,osx-arm64,win-64" >> $GITHUB_OUTPUT
              ;;
            "linux")
              echo "platform_matrix=linux-64,linux-aarch64" >> $GITHUB_OUTPUT
              ;;
            "osx")
              echo "platform_matrix=osx-64,osx-arm64" >> $GITHUB_OUTPUT
              ;;
            "win")
              echo "platform_matrix=win-64" >> $GITHUB_OUTPUT
              ;;
            "arm")
              echo "platform_matrix=linux-aarch64,osx-arm64" >> $GITHUB_OUTPUT
              ;;
          esac

          # Set Python versions matrix
          if [ "${{ inputs.python_versions }}" == "all" ]; then
            echo "python_matrix=3.10,3.11,3.12,3.13" >> $GITHUB_OUTPUT
          else
            echo "python_matrix=${{ inputs.python_versions }}" >> $GITHUB_OUTPUT
          fi

  trigger_conda_builds:
    needs: prepare_matrix
    if: inputs.build_type == 'all' || inputs.build_type == 'conda'
    strategy:
      matrix:
        platform: ${{ fromJson(format('[{0}]', needs.prepare_matrix.outputs.platform_matrix)) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Trigger platform-specific conda workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const platform = '${{ matrix.platform }}';
            let workflowFileName;

            // Map platform to workflow file
            if (platform === 'linux-64') {
              workflowFileName = 'llvmlite_linux-64_conda_builder.yml';
            } else if (platform === 'linux-aarch64') {
              workflowFileName = 'llvmlite_linux-aarch64_conda_builder.yml';
            } else if (platform === 'osx-64') {
              workflowFileName = 'llvmlite_osx-64_conda_builder.yml';
            } else if (platform === 'osx-arm64') {
              workflowFileName = 'llvmlite_osx-arm64_conda_builder.yml';
            } else if (platform === 'win-64') {
              workflowFileName = 'llvmlite_win-64_conda_builder.yml';
            } else {
              core.setFailed(`Unsupported platform: ${platform}`);
              return;
            }

            const pythonVersions = '${{ needs.prepare_matrix.outputs.python_matrix }}'.split(',');
            console.log(`Triggering ${workflowFileName} for Python versions: ${pythonVersions.join(', ')}`);

            // Get workflow ID
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const workflow = workflows.workflows.find(w => w.path === `.github/workflows/${workflowFileName}`);
            if (!workflow) {
              core.setFailed(`Workflow not found: ${workflowFileName}`);
              return;
            }

            // Trigger workflow
            try {
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                ref: context.ref,
                inputs: {
                  llvmdev_run_id: '${{ inputs.llvmdev_run_id }}'
                }
              });
              console.log(`Triggered workflow ${workflowFileName}`, response);
            } catch (error) {
              core.setFailed(`Failed to trigger workflow: ${error.message}`);
            }

  trigger_wheel_builds:
    needs: prepare_matrix
    if: inputs.build_type == 'all' || inputs.build_type == 'wheel'
    strategy:
      matrix:
        platform: ${{ fromJson(format('[{0}]', needs.prepare_matrix.outputs.platform_matrix)) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Trigger platform-specific wheel workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const platform = '${{ matrix.platform }}';
            let workflowFileName;

            // Map platform to workflow file
            if (platform === 'linux-64') {
              workflowFileName = 'llvmlite_linux-64_wheel_builder.yml';
            } else if (platform === 'linux-aarch64') {
              workflowFileName = 'llvmlite_linux-arm64_wheel_builder.yml';
            } else if (platform === 'osx-64') {
              workflowFileName = 'llvmlite_osx-64_wheel_builder.yml';
            } else if (platform === 'osx-arm64') {
              workflowFileName = 'llvmlite_osx-arm64_wheel_builder.yml';
            } else if (platform === 'win-64') {
              workflowFileName = 'llvmlite_win-64_wheel_builder.yml';
            } else {
              core.setFailed(`Unsupported platform: ${platform}`);
              return;
            }

            const pythonVersions = '${{ needs.prepare_matrix.outputs.python_matrix }}'.split(',');
            console.log(`Triggering ${workflowFileName} for Python versions: ${pythonVersions.join(', ')}`);

            // Get workflow ID
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const workflow = workflows.workflows.find(w => w.path === `.github/workflows/${workflowFileName}`);
            if (!workflow) {
              core.setFailed(`Workflow not found: ${workflowFileName}`);
              return;
            }

            // Trigger workflow
            try {
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                ref: context.ref,
                inputs: {
                  llvmdev_run_id: '${{ inputs.llvmdev_run_id }}',
                  upload_wheels: '${{ inputs.upload_wheels }}'
                }
              });
              console.log(`Triggered workflow ${workflowFileName}`, response);
            } catch (error) {
              core.setFailed(`Failed to trigger workflow: ${error.message}`);
            }